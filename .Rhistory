diag(P) = 0
#similaridad de clientes - matriz de co ocurrencia de clienes
C = M %*% t(M)
C
#no es una matriz identidad (como en la correlación)
diag(C) = C
diag(C) = 0
c
C
#instalar paquete tidyverse  y readr
install.packages("tidyverse")
install.packages("readr")
library(readr)
ICE_2014 <- read_csv("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/ICE 2014.csv")
View(ICE_2014)
View(ICE_2014)
View(ICE_2014)
View(ICE_2014)
View(ICE_2014)
View(ICE_2014)
names(tabla1)
View(ICE_2014)
View(ICE_2014)
library(readr)
View(ICE_2014)
names(ICE_2014)
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = ICE_2014 %>%
pivot_longer(cols = c( [1] "MUNICIPIO" "KM0"       "KM2"       "KM4"       "KM6"       "KM8"
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = ICE_2014 %>%
pivot_longer(cols = c(  "KM0" , "KM2" , "KM4" , "KM6" , "KM8" , "KM10" , "KM12" , "KM14" , "KM16" , "KM18" , "KM20" , "KM22" , "KM24" , "KM26" ), names_to = "iteracion", values_to = "ranking")
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = ICE_2014 %>%
pivot_longer(cols = c(  "KM0" , "KM2" , "KM4" , "KM6" , "KM8" , "KM10" , "KM12" , "KM14" , "KM16" , "KM18" , "KM20" , "KM22" , "KM24" , "KM26" ), names_to = "iteracion", values_to = "ranking")
names(ICE_2014)
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = ICE_2014 %>%
pivot_longer(cols = c(  [1] "MUNICIPIO" "KM0"       "KM2"       "KM4"       "KM6"       "KM8"
#instalar paquete tidyverse  y readr
install.packages("tidyverse")
install.packages("readr")
View(dataset)
View(ICE_2014)
View(ICE_2014)
View(ICE_2014)
View(ICE_2014)
library(readr)
tabla1 <- read_csv("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/tabla1.csv")
View(tabla1)
names(tabla1)
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("Km,0"   ,   "Km,2"   ,   "Km,4"   ,   "Km,6"   ,   "Km,8"    ,  "Km,10"  ,   "Km,12"  ,   "Km,14"  ,   "Km,16"  ,   "Km,18"   ,  "Km,20"  ,   "Km,22" , "Km,24"  ,   "Km,26" ), names_to = "iteracion", values_to = "ranking")
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("Km0"   ,   "Km2"   ,   "Km4"   ,   "Km6"   ,   "Km8"    ,  "Km10"  ,   "Km12"  ,   "Km14"  ,   "Km16"  ,   "Km18"   ,  "Km20"  ,   "Km22" , "Km24"  ,   "Km26" ), names_to = "iteracion", values_to = "ranking")
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("KM0"       "KM2"       "KM4"       "KM6"       "KM8"
library(readr)
tabla1 <- read_csv("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/tabla1.csv")
View(tabla1)
names(tabla1)
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("KM0"       "KM2"       "KM4"       "KM6"       "KM8"
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("KM,0"      "KM,2"      "KM,4"      "KM,6"      "KM,8"
setwd("~/")
setwd("~/")
library(readr)
tabla1 <- read_csv("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/tabla1.csv")
View(tabla1)
names(tabla1)
names(tabla1)
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c( "KM,0" , "KM,2" , "KM,4" , "KM,6" , "KM,8" , "KM,10" , "KM,12" , "KM,14" , "KM,16" , "KM,18" , "KM,20" , "KM,22" , "KM,24" , "KM,26"  ), names_to = "iteracion", values_to = "ranking")
pivot_longer(cols = c( "KM,0" , "KM,2" , "KM,4" , "KM,6" , "KM,8" , "KM,10" , "KM,12" , "KM,14" , "KM,16" , "KM,18" , "KM,20" , "KM,22" , "KM,24" , "KM,26"  ), names_to = "iteracion", values_to = "ranking")
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("KM,0" , "KM,2" , "KM,4" , "KM,6" , "KM,8" , "KM,10" , "KM,12" , "KM,14" , "KM,16" , "KM,18" , "KM,20" , "KM,22" , "KM,24" , "KM,26"), names_to = "iteracion", values_to = "ranking")
View(tabla1)
names(tabla1)
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("KM,0" , "KM,2" , "KM,4" , "KM,6" , "KM,8" , "KM,10" , "KM,12" , "KM,14" , "KM,16" , "KM,18" , "KM,20" , "KM,22" , "KM,24" , "KM,26"), names_to = "iteracion", values_to = "ranking")
View(ICE_2014)
View(ICE 2014)
View(ICE_2014)
View(ICE_2014)
#Cargar paquete tidyverse y readr
library(tidyverse)
library(readr)
View(ICE_2014)
tabla1 <- read_csv("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/ICE_2014.csv")
View(ICE_2014)
View(tabla1)
names(tabla1)
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("Km,0"   ,   "Km,2"   ,   "Km,4"   ,   "Km,6"   ,   "Km,8"    ,  "Km,10"  ,   "Km,12"  ,   "Km,14"  ,   "Km,16"  ,   "Km,18"   ,  "Km,20"  ,   "Km,22" , "Km,24"  ,   "Km,26" ), names_to = "iteracion", values_to = "ranking")
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("KM,0"   ,   "KM,2"   ,   "KM,4"   ,   "KM,6"   ,   "KM,8"    ,  "KM,10"  ,   "KM,12"  ,   "KM,14"  ,   "KM,16"  ,   "KM,18"   ,  "KM,20"  ,   "KM,22" , "KM,24"  ,   "KM,26" ), names_to = "iteracion", values_to = "ranking")
# 1. Pivotar tabla  "A LO LARGO"
t1_PIVOTANTE = tabla1 %>%
pivot_longer(cols = c("KM,0"   ,   "KM,2"   ,   "KM,4"   ,   "KM,6"   ,   "KM,8"    ,  "KM,10"  ,   "KM,12"  ,   "KM,14"  ,   "KM,16"  ,   "KM,18"   ,  "KM,20"  ,   "KM,22" , "KM,24"  ,   "KM,26" ), names_to = "iteracion", values_to = "ranking")
# Exportar resultado: tabla ordenada
write.csv(t1_PIVOTANTE, file = "ice_CHARTICULATOR.csv")
View(t1_PIVOTANTE)
View(t1_PIVOTANTE)
setwd("C:/Users/karit/Desktop")
setwd("C:/Users/karit/Desktop")
# Exportar resultado: tabla ordenada
write.csv(t1_PIVOTANTE, file = "ice_CHARTICULATOR.csv")
getwd()
library (EconGeo)
library (EconGeo)
library (EconGeo)
library (EconGeo)
# Gestión de datos de red
# 1. Transformar la matriz en un dataframe
install.packages(EconGeo)
# Gestión de datos de red
# 1. Transformar la matriz en un dataframe
install.packages( EconGeo )
install.packages("EconGeo")
library (EconGeo)
M = as.matrix(
read.csv("https://raw.githubusercontent.com/PABalland/ON/master/amz.csv" ,
sep = ",",
header = T,
row.names = 1))
M = as.matrix(
read.csv("https://raw.githubusercontent.com/PABalland/ON/master/amz.csv" ,
sep = ",",
header = T,
row.names = 1))
M = as.matrix(
read.csv("https://raw.githubusercontent.com/PABalland/ON/master/amz.csv" ,
sep = ",",
header = T,
row.names = 1))
#ejemplo de una matriz de RCA con personas y productos/ paises y productos-industrias
?RCA
#ejemplo de una matriz de RCA con personas y productos/ paises y productos-industrias
?RCA
library (EconGeo)
M = as.matrix(
read.csv("https://raw.githubusercontent.com/PABalland/ON/master/amz.csv" ,
sep = ",",
header = T,
row.names = 1))
M = as.matrix(
read.csv("https://raw.githubusercontent.com/PABalland/ON/master/amz.csv" ,
sep = ",",
header = T,
row.names = 1))
M
#ejemplo de una matriz de RCA con personas y productos/ paises y productos-industrias
?RCA
#ejemplo de una matriz de RCA con personas y productos/ paises y productos-industrias
?RCA
‘??RCA’
??RCA
colnames(EL) = c("Customer" , "Product" , "Count")
# La forma más usual de encontrar los datos
EL
EL=get_list(M)
colnames (EL) = c("Customer" , "Product" , "Count")
colnames (EL) = c("Customer" , "Product" , "Count")
EL=get.list (M)
EL=get_list (M)
colnames (EL) = c("Customer" , "Product" , "Count")
EL=get_list(M)
colnames(EL) = c("Customer" , "Product" , "Count")
M
EL=get_list(M)
colnames(EL) = c("Customer" , "Product" , "Count")
EL
MM=get_matrix(EL)
MM
View(EL)
x = subset(EL,Product=="Tie")
x
library (EconGeo)
M = as.matrix(
read.csv("https://raw.githubusercontent.com/PABalland/ON/master/amz.csv" ,
sep = ",",
header = T,
row.names = 1))
M
library (igraph)
co_occurrence(M)
co_occurrence(M)
# co-ocurrencia entre productos t es transpuesta
c = co_occurrence(t(M))
c
# estima el relacionamiento o proximidad pero normalizado, para asegurar que el numero de co ocurrencias que observamos
# es mayor al numero de co ocurrencias probables (probailidad condicional)
r = relatedness(c)
r
relatedness
r[r<1] = 0
r[>1] = 1
r[r<1] = 0
r[r>1] = 1
library (igraph)
library (igraph)
install.packages("igraph")
library (igraph)
g1 = graph_from_adjacency_matrix(r, mode = "undirected")
plot(g1)
library (EconGeo)
rca_2014 <- read.csv("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/LAB 9/rca_2014.csv", stringsAsFactors=TRUE)
View(rca_2014)
M = as.matrix(
read.csv("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/LAB 9/rca_2014.csv" ,
sep = ",",
header = T,
row.names = 1))
head (M[,1:10])
dim (M)
# co-ocurrencia entre personas/paises/estados
co_occurrence(M)
# co-ocurrencia entre productos t es transpuesta
c = co_occurrence(t(M))
#c es la matriz transpuesta
c
# estima el relacionamiento o proximidad pero normalizado, para asegurar que el numero de co ocurrencias que observamos
# es mayor al numero de co ocurrencias probables (probailidad condicional)
#tie and Surfboard puede que no esten tan relacionados, abajo de  1 no es relacionado mientras que mayor a 1 si es relacionado
r=relatedness(c)
#e es la matriz de relacionamiento
r
r[r<1] = 0
r[r>1] = 1
r
library (igraph)
library (igraph)
g1=graph_from_adjacency_matrix(r,mode = "undirected")
plot(g1)
write.csv(r,file="reladedness.csv")
write.csv(c,file="cocurrences.csv")
dim(M)
#crear una matriz aleatoria de 200*200
M<-matrix(runif(200*200,min=0,max = 100),ncol = 200)
diag(M)<-0
head(M[,1:6])
dim(M)
library(igraph)
g<-graph.adjacency(M,mode="undirected",weighted = TRUE)
plot(g)
plot (g)
M<- -M
head(M[,1:6])
#graficar la nueva matriz negativa, ver el espacio producto, tecnológico
g<-graph.adjacency(M,mode = "undirected",weighted = TRUE)
MST<-minimum.spanning.tree(g)
plot(MST, vetrex.shape="none",vertex.label.cex=.7)
plot(MST, vertex.shape="none", vertex.label.cex=.7)
#graficar la nueva matriz negativa, ver el espacio producto, tecnológico
#g es mi gráfica
g <- graph.adjacency(M, mode="undirected", weighted =TRUE)
MST <- minimum.spanning.tree(g)
plot(MST, vertex.shape="none", vertex.label.cex=.7)
#matriz de adyacensias, nuevo relacionamiento
A<-get.adjacency((MST,sparse=F))
#matriz de adyacensias, nuevo relacionamiento
A<-get.adjacency(MST,sparse=F)
head(A)
#importar
write_graph(MST,file = "g.gml",format = "gml")
#exportar red de adyacencias
write.csv(A,file = "Adyacences.csv")
file.choose()
file.choose()
M = as.matrix(
read.csv("C:\\Users\\Usuario\\OneDrive\\Escritorio\\DOCTORADO\\DRA. CARLA-COMPLEJIDAD ECONÓMICA\\LABS\\LAB 11\\INPUT\\relatednessbinario.csv" ,
sep = ",",
header = T,
row.names = 1))
head (M[,1:10])
dim (M)
library (igraph)
red_hidalgo1<-graph.adjacency(M,mode = "undirected",weighted = TRUE)
plot(red_hidalgo1)
M<--M
head(M[,1:6])
plot(MST,vertex.shape-"none",vertex.label.cex-.7
red_hidalgo2<-graph.adjacency(M,mode="undirected",weighted = TRUE)
red_hidalgo2<-graph.adjacency(M,mode="undirected",weighted = TRUE)
MST<-minimum.spanning.tree(red_hidalgo2)
plot(MST,vertex.shape-"none",vertex.label.cex-.7)
red_hidalgo2<-graph.adjacency(M,mode="undirected",weighted = TRUE)
MST<-minimum.spanning.tree(red_hidalgo2)
plot(MST,vertex.shape="none",vertex.label.cex=.7)
#nodos n-1
write.graph(MST,file = "redhidalgo2.gml",format = "gml")
# matriz de proximos adyaentes (nuevo relacionamiento)
A<=get.adjacency(MST,sparse = F)
# matriz de proximos adyaentes (nuevo relacionamiento)
A<-get.adjacency(MST,sparse = F)
#exportar matriz de proximos adyacentes
write.csv(A,file = "AdyacetesCorMST.csv")
library (EconGeo)
?RCA
?RCA
??RCA
colnames(mat) <- c("I1", "I2", "I3", "I4")
MAT
mat#escribe mat en la consola, son número de empleados
mat
colnames(mat) <- c("I1", "I2", "I3", "I4")
set.seed(31)
mat <- matrix(sample(0:100, 20, replace = TRUE), ncol = 4)
rownames(mat) <- c("R1", "R2", "R3", "R4", "R5")
colnames(mat) <- c("I1", "I2", "I3", "I4"
mat
mat
dim(mat)
mat-RCA(mat, binary-t)
mat-RCA(mat, binary-t)
mat-RCA(mat, binary-T)
mat-RCA(mat, binary=T)
mat=RCA(mat, binary=T)
mat=RCA(mat,binary=T)
mat=RCA(mat,binary=T)
mat
dim(mat)
mat=RCA(mat, binary = T)
install.packages("RCA")
mat=RCA(mat, binary = T)
mat=RCA(mat,binary=T)
mat=rca(mat,binary=T)
mat
# calcula la matriz de co-ocurrencia de la mat transpuesta
c=co_occurrence(t(mat))
c
# calcula el relacionamiento con base en las co-ocurrencias
r=relatedness(c)
r
r[r>1]=1
t
r
r[r>1]=1
r
library (EconGeo)
??RCA
colnames(mat) <- c("I1", "I2", "I3", "I4")
mat
dim(mat)
mat=rca(mat,binary=T)
mat
# calcula la matriz de co-ocurrencia de la mat transpuesta
c=co_occurrence(t(mat))
c
# calcula el relacionamiento con base en las co-ocurrencias
r=relatedness(c)
r
r[r<1]=0
r[r>1]=1
r
mat
rd=relatedness_density(mar,r)
rd=relatedness_density(mat,r)
rd
rd=get_list(rd)
rd
# 6. Predecir entrada
?entry.list
# 6. Predecir entrada
??entry.list
colnames(mat1) <- c("I1", "I2", "I3", "I4")
set.seed(31)
mat1 <- matrix(sample(0:1, 20, replace = TRUE), ncol = 4)
rownames(mat1) <- c("R1", "R2", "R3", "R4", "R5")
colnames(mat1) <- c("I1", "I2", "I3", "I4")
mat1
mat2 <- mat1
mat2[3, 1] <- 1
mat2
d=entry_list(mat1,mat2)
d
d=merge(d,rd,by = c("Region","Industry"))
colnames(d)=c("Region","Industry","Entry", "Period")
d=mer
colnames(d)=c("Region","Industry","Entry", "Period")
d=merge(d, rd, by = c("Region","Industry"))
d
summary(lm(d$Entry=d$Count))
summary(lm(d$Entry~d$Count))
#exportar resultados para cytoscape o gephi
write.csv(d, file="Resultados")
install.packages("ggplot2")
# cargar libreria ggplot2
library(ggplot2)
# leer df
green_data <- read.csv("REGESIONES FINALES.csv")
load("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/LAB 13/REGESIONES FINALES.csv")
> load("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/LAB 13/REGESIONES FINALES.csv")
load("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/LAB 13/REGESIONES FINALES.csv")
install.packages("ggplot2")
install.packages("ggplot2")
# cargar libreria ggplot2
library(ggplot2)
# cargar libreria ggplot2
library(ggplot2)
load("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/LAB 13/REGESIONES FINALES.csv")
# leer df
green_data - read.csv("REGESIONES FINALES.csv")
# leer df
green_data = read.csv("REGESIONES FINALES.csv")
library(EconGeo)
EL=read.csv("http://raw.githubusercontent.com/PABalland/ON/master/lemis-el.csv")
)
EL=read.csv("http://raw.githubusercontent.com/PABalland/ON/master/lesmis-el.csv")
head(EL)
#transformar a matriz
MM<-get_matrix(EL)
#transformar a matriz
MM<-get_matrix(EL)
#EL=edge list
EL
View(EL)
View(MM)
#tweeter es un red dirijida (yo sigo a shakira pero ella no me sigue a mi, FB es una red no dirijida porque es bidimensional)
#este ejemplo es de una red no dirijida, las aristas estan conectadas con una flecha bidireccional
library(igraph)
g<-graph_from_data_frame(d=EL, directed = F)
g
plot (g)
EL$Weight=NULL
head(EL)
library(networkd3)
library(networkD3)
library("networkd3")
install.packages("networkD3")
library(networkD3)
#ver matriz simetrica (red no dirigida-red bidirecional)
simpleNetwork(EL)
# cargar libreria ggplot2
library(ggplot2)
#buscar df
file.choose(C:\Users\Usuario\OneDrive\Escritorio\DOCTORADO\DRA. CARLA-COMPLEJIDAD ECONÓMICA\LABS\LAB 20\PARA FACETING.CSV)
#buscar df
file.choose()
#buscar df
file.choose()
setwd("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/LAB 20")
# leer base
DENSIDAD VERDE<- read.cvs("C:/Users/Usuario/OneDrive/Escritorio/DOCTORADO/DRA. CARLA-COMPLEJIDAD ECONÓMICA/LABS/LAB 20")
#ver nombres
names(DENSIDAD VERD)
# leer base
DENSIDAD VERDE<- PARA FACETING.csv
#ver nombres
names(DENSIDAD VERDE)
#buscar df
file.choose()
file.choose()
library(readr)
PARA_FACETING <- read_csv("PARA FACETING.csv")
View(PARA_FACETING)
# leer base
DENSIDAD VERDE<- PARA FACETING.csv
# leer base
densidad_verde<-PARA_FACETING
#ver nombres
names(densidad_verde)
# colocando grafica base
p<-ggplot(data=densidad_verde,
mapping=aes(x=density,
Y=PCI.2018,
color=Region))+
geom_point()
# crear objeto p
p
#instalando paquete
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# colocando grafica base
p<-ggplot(data=densidad_verde,
mapping=aes(x=density,
Y=PCI.2018,
color=Region))+
geom_point()
# crear objeto p
p
# colocando grafica base
p<-ggplot(data=densidad_verde,
mapping = aes(x=DENSITY,y=PCI.2018,color=Region))+
geom_point()
p<-ggplot(data=densidad_verde,
mapping = aes(x=DEN,y=PCI.2018,color=Region))+
geom_point()
#instalando paquete
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
p<-ggplot(data=densidad_verde,
mapping = aes(x=DEN,y=PCI.2018,color=Region))+
geom_point()
# crear objeto p
p
